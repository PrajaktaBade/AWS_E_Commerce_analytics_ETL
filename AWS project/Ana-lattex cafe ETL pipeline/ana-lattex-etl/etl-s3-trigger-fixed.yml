AWSTemplateFormatVersion: "2010-09-09"
Description: Attach S3 Trigger to Lambda using CloudFormation Custom Resource

Parameters:
  RawBucketName:
    Type: String
    Description: Name of the raw S3 bucket
  LambdaFunctionName:
    Type: String
    Description: Name of the ETL Lambda function

Resources:
  # Permission for S3 to invoke ETL Lambda
  S3TriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionName
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${RawBucketName}

  # IAM Role for the custom resource Lambda
  AttachS3TriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AttachS3TriggerLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Custom Lambda to attach S3 trigger
  AttachS3TriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AttachS3TriggerLambda
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt AttachS3TriggerLambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  props = event['ResourceProperties']
                  bucket = props['BucketName']
                  func_arn = props['LambdaFunctionName']

                  config = {
                      'LambdaFunctionConfigurations': [
                          {
                              'LambdaFunctionArn': func_arn,
                              'Events': ['s3:ObjectCreated:*']
                          }
                      ]
                  }

                  s3.put_bucket_notification_configuration(
                      Bucket=bucket,
                      NotificationConfiguration=config
                  )

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # Custom Resource to trigger the Lambda
  AttachS3Trigger:
    Type: Custom::S3Notification
    Properties:
      ServiceToken: !GetAtt AttachS3TriggerLambda.Arn
      BucketName: !Ref RawBucketName
      LambdaFunctionName: !Ref LambdaFunctionName

Outputs:
  AttachS3TriggerLambdaName:
    Description: Name of the custom resource Lambda
    Value: !Ref AttachS3TriggerLambda
